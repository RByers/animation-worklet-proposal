<pre class='metadata'>
Title:  CSS Animation Worklet API
Status: CG-DRAFT
Group: WICG
URL: https://wicg.github.io/animation-worklet/
Shortname: css-animation-api
Level: 1
Abstract:
Editor: Majid Valipour, majidvp@google.com
Editor: Robert Flack, flackr@chromium.org
Editor: Stephen McGruer, smcgruer@chromium.org

</pre>

<pre class="link-defaults">
spec:infra; type:dfn; text:list
spec:dom; type:interface; text:Document
</pre>

<pre class="anchors">
urlPrefix: https://heycam.github.io/webidl/; type: dfn;
    text: NotSupportedError
    urlPrefix: #dfn-;
        text: callback this value
        text: exception
        text: throw
        url: throw; text: thrown
    url: es-invoking-callback-functions; text: Invoke
urlPrefix: https://html.spec.whatwg.org/#; type: dfn;
    url: run-the-animation-frame-callbacks; text: running the animation frame callbacks
urlPrefix: https://www.w3.org/TR/css3-transitions/#; type: dfn;
    text: animatable properties
urlPrefix: https://w3c.github.io/web-animations/#; type: dfn;
    url: the-documents-default-timeline; text: default document timeline
    url: concept-animation; text: animation
    text: effect value
    text: effect stack
    text: target property
    text: timeline
    text: animation effect
    text: current time
    text: local time
    text: inherited time
    text: ready
    text: play state
    text: playback rate
    text: set the target effect of an animation
    text: set the timeline of an animation
urlPrefix: https://w3c.github.io/web-animations/level-2/#; type: interface;
    text: GroupEffectReadOnly
    text: AnimationEffectReadOnly
    text: AnimationEffectMutable
    text: GroupEffectMutable
    text: Animation
urlPrefix: https://tc39.github.io/ecma262/#sec-; type: dfn;
    text: constructor
    text: Construct
    text: IsCallable
    text: IsConstructor
    text: HasProperty
    url: ecmascript-data-types-and-values; text: Type
    url: map-objects; text:map object
    url: get-o-p; text: Get
    url: set-o-p-v-throw; text: Set
    url: terms-and-definitions-function; text: function
    urlPrefix: native-error-types-used-in-this-standard-
        text: TypeError
urlPrefix: https://www.w3.org/TR/hr-time-2/#dom-; type: dfn
    text: DOMHighResTimeStamp
urlPrefix: https://wicg.github.io/scroll-animations/#; type: interface
    url: scrolltimeline; text: ScrollTimeline
    url: dictdef-scrolltimelineoptions; text: ScrollTimelineOptions
    url: dom-scrolltimeline-scrollsource; text: scrollSource
urlPrefix: https://wicg.github.io/scroll-animations/#; type: dfn
    url: current-time-algorithm; text: current time of the ScrollTimeline;
</pre>

<pre class=biblio>
{
    "explainer": {
        "href": "https://github.com/WICG/animation-worklet/blob/gh-pages/README.md",
        "title": "Animation Worklet Explainer",
        "status": "CR",
        "publisher": "WICG",
        "deliveredBy": [
            "https://github.com/WICG/animation-worklet//"
        ]
    }
}
</pre>

Deprecated {#deprecated}
========================
<strong>The contents of this document are out of date and in need of large re-write to cover
changes to the AnimationWorklet API</strong>.

For now, please refer to our [[explainer]] for more up-to-date content.

Introduction {#intro}
=====================
This document introduces a new primitive for creating scroll-linked and other high performance
procedural animations on the web. For details on the rationale and motivation see [[explainer]].

The <a>Animation Worklet</a> provides a method to create scripted animations that control a set of
<a>animation effects</a>. The API is designed to make it possible for user agents to run such
animations to run in their own dedicated thread to provide a degree of performance isolation
from main thread.

<strong>Relationship to Web Animation API</strong>: Animations that are running inside a
<a>Animation Worklet</a> execution context expose the same {{Animation}} interface on the main
javascript execution context. So they can be created, played, canceled, inspected, and generally
controlled from main thread using Web Animation APIs. However, worklet animations follow a
different timing model which enables them to be script-driven, statefull, and runnable in a
parallel worklet execution context. As such Web Animation API that seek or alter the input
time (reverse, finish, etc.) has a different semantic for worklet animations.

Note: <strong>Access to input</strong>: We are interested on exposing additional user input (e.g.,
scrolling input) to these animations so that authors can create jank-free input driven animations
which are not really possible today.


Threading Model {#threading-model}
==================================

<a>Animation Worklet</a> is thread-agnostic but rendering engines are recommended to create at
least one parallel worklet execution context and different from the main javascript execution
context e.g., on its own dedicated thread. Rendering engines may assign any worklet animations to
run in such parallel execution context which ensures their performance is not impacted by the main
thread jank.

Further, rendering engines are recommended to make a best-effort attempt to execute animate
callbacks in sync with visual frame production. Note that it is still legal for rendering engines
to produce visual frames without blocking to receive animation updates from worklet (i.e., letting
the effects to slip behind). This can happen for example when *animate* callback is not able to
complete in time to meet the frame deadline.


Both above recommendations are intended to help establish an environment for well behaving
scripted animations to create effects that are consistently smooth and responsive. We believe
scripted animations that run in a parallel execution environment and limit themselves to animating
cheaper properties (e.g., none paint or layout inducing properties) will have a much better chance
of meeting strict frame budgets that are needed for smoothness and avoiding slippage.


To ensure relatively up-to-date state on main thread, the latest known state of animation effects
from any parallel worklet execution context needs to be periodically synced back to the main
thread. After any such sync, the rendering engine runs a worklet animation update step before
<a>running the animation frame callbacks</a> as part of its document lifecycle. This step, for
each worklet animation updates its corresponding <a>effect value</a>s on the main thread which
participates in <a>effect stack</a> and represents the animation's changes. Note that due to
asynchronous nature of this animation model, the script running on the main javascript execution
context reading a worklet animated <a>target property</a> may see a stale value compared to the
value in effect at the parallel worklet context (i.e, the one used when producing the frame
currently visible to the user). This is similar to the effect of asynchronous scrolling on scroll
offsets on main thread.



Animation Worklet {#animation-worklet-desc}
==============================
<dfn>Animation Worklet</dfn> is a {{Worklet}} responsible for all classes related to custom
animations. The worklet can be accessed via {{animationWorklet}} attribute.

The {{animationWorklet}}'s <a>worklet global scope type</a> is {{AnimationWorkletGlobalScope}}.

The {{AnimationWorkletGlobalScope}} represents the <dfn>global execution context</dfn> of
{{animationWorklet}}.

<pre class='idl'>
partial interface Window {
    [SameObject] readonly attribute Worklet animationWorklet;
};
</pre>

<pre class='idl'>
callback VoidFunction = void ();

[Global=Worklet]
interface AnimationWorkletGlobalScope : WorkletGlobalScope {
    void registerAnimator(DOMString name, VoidFunction animatorCtor);
};
</pre>


<div class='note'>
    Note: This is how the class should look.
    <pre class='lang-javascript'>
        class FooAnimator {
            constructor(options) {
                // Called when a new animator is instantiated.
            }
            animate(currentTime, effect) {
                // Animation frame logic goes here.
            }
        }
    </pre>
</div>



Concepts {#concepts}
====================
An <dfn>animator definition</dfn> is a <a>struct</a> which describes the author defined custom
animation as needed by {{AnimationWorkletGlobalScope}}. It consists of:

 - An <dfn>animator name</dfn> <<ident>>#.

 - A <dfn>class constructor</dfn> which is the class <a>constructor</a>.

 - An <dfn>animate function</dfn> which is the animate <a>function</a> callback.



An <dfn>animator instance</dfn> a <a>struct</a> which describes a fully realized custom animation
instance in the {{AnimationWorkletGlobalScope}}. It has a reference to an <a>animator
definition</a> and owns the instance specific state such as animation effects and timelines. It
consists of:

 - An <a>animator name</a>.

 - An <a>animation requested flag</a>.

 - An <dfn>animator effect</dfn> which is an <a>animation effect</a>.

 - An <dfn>animator current time</dfn> which is the corresponding <a>worklet animation</a>'s current
     time.

 - An <dfn>animator timelines list</dfn> which is <a>list</a> of its attached <a>timelines</a>.


Registering an Animator Definition {#registering-animator-definition}
============================================================
The {{AnimationWorkletGlobalScope}} has a <dfn>animator name to animator definition map</dfn>.
The map gets populated when {{registerAnimator(name, animatorCtor)}} is called.



<div algorithm="register-animator">

When the <dfn method for=AnimationWorkletGlobalScope>registerAnimator(|name|,
|animatorCtor|)</dfn> method is called, the user agent <em>must</em> run the following steps:

    1. If the |name| is not a valid <<ident>>, <a>throw</a> a <a>TypeError</a> and abort all these
        steps.

    2. If the |name| exists as a key in the <a>animator name to animator definition map</a>,
        <a>throw</a> a <a>NotSupportedError</a> and abort all these steps.

    3. If the result of <a>IsConstructor</a>(|animatorCtor|) is false, <a>throw</a> a
        <a>TypeError</a> and abort all these steps.

    4. Let |prototype| be the result of <a>Get</a>(|animatorCtor|, "prototype").

    5. If the result of <a>Type</a>(|prototype|) is not Object, <a>throw</a> a <a>TypeError</a>
        and abort all these steps.

    6. Let |animate| be the result of <a>Get</a>(|prototype|, "animate").

    7. If the result of <a>IsCallable</a>(|animate|) is false, <a>throw</a> a <a>TypeError</a> and
        abort all these steps.

    10. Let |definition| be a new <a>animator definition</a> with:

        - <a>animator name</a> being |name|

        - <a>class constructor</a> being |animatorCtor|

        - <a>animate function</a> being |animate|

    11. Add the key-value pair (|name| - |definition|) to the <a>animator name to animator
        definition map</a> of the associated <a>document</a>.
</div>


Animator Instance {#animator-instance-section}
======================================

Creating an Animator Instance {#creating-animator-instance}
-----------------------------------------------------------

Each <a>animator instance</a> lives in an {{AnimationWorkletGlobalScope}}. The
<a>animator instance</a> cannot be disposed arbitrarily (e.g., in the middle of running animation
as it may contain the scripted animation state.

Issue: This is no longer true as we provide destroy callback.

The {{AnimationWorkletGlobalScope}} has an <dfn>animation id to instance map</dfn>.
The map is populated when the user agent constructs a new <a>animator instance</a> in that scope
that corresponds to a worklet animation in the document scope.

<div algorithm="create-animator">

To <dfn>create a new animator instance</dfn> given a |name|, |animationId|,
|timeline|, |effect|, and |workletGlobalScope|,
the user agent <em>must</em> run the following steps:

    1. Let the |definition| be the result of looking up |name| on the |workletGlobalScope|'s
         <a>animator name to animator definition map</a>.

          If |definition| does not exist abort the following steps.

    2. Let |animatorInstanceMap| be |workletGlobalScope|'s <a>animation id to
         instance map</a>.

    3. If an entry exists for |animationId| within |animatorInstanceMap| then abort the
         following steps.

    4. Let |animatorCtor| be the <a>class constructor</a> of |definition|.

    5. Let |timelineList| be a new <a>list</a> with |timeline| added to it.

    6. Let |animatorInstance| be the result of <a>Construct</a>(|animatorCtor|).

        If <a>Construct</a> throws an exception, set the result of looking up |animationId| in
        |animatorInstanceMap| in |animatorInstanceMap| to <b>null</b>, and abort the following
        steps.

    6. Set the following on |animatorInstance| with:
        - <a>animator name</a> being |name|
        - <a>animation requested flag</a> being <a>frame-current</a>
        - <a>animator current time</a> being unresolved
        - <a>animator effect</a> being |effect|
        - <a>animator timelines list</a> being |timelineList|

    7. Set the result of looking up |animationId| in |animatorInstanceMap| to
         |animatorInstance|.

</div>


Running Animators {#running-animators}
--------------------------------------

When a user agent wants to produce a new animation frame, if for any <a>animator instance</a> the
associated <a>animation requested flag</a> is <a>frame-requested</a> then the the user agent
<em>must</em> <a>run animators</a> for the current frame.

Note: The user agent is not required to run animations on every visual frame. It is legal to defer
      generating an animation frame until a later frame. This allow the user agent to
      provide a different service level according to their policy.


<div algorithm="run-animators">

When the user agent wants to <dfn>run animators</dfn> in a given |workletGlobalScope|, it
<em>must</em> iterate over all animation id as |animationId|. For each item:

  1. Let |instance| be the result of looking up |animationId| in the
        |workletGlobalScope|'s <a>animation id to instance map</a>.

      If |instance| does not exist then abort the following steps.

  2. Let |animatorName| be |instance|'s <a>animator name</a>

  3. Let the |definition| be the result of looking up |animatorName| on the |workletGlobalScope|'s
        <a>animator name to animator definition map</a>.

      If |definition| does not exist then abort the following steps.

  4. If the <a>animation requested flag</a> for |instance| is <a>frame-current</a> or the effect
       belonging to the |instance| will not be visible within the visual viewport of the current
       frame the user agent <em>may</em> abort all the following steps.

        Issue: Consider giving user agents permission to skip running animator instances to
        throttle slow animators.

  5. Let |animateFunction| be |definition|'s <a>animate function</a>.


  7. Let |currentTime| be <a>animator current time</a> of |instance|.

  8. Let |effect| be <a>animator effect</a> of |instance|.

  9. <a>Invoke</a> |animateFunction| with arguments «|currentTime|, |effect|»,
        and with |instance| as the <a>callback this value</a>.

</div>
Note: Although inefficient, it is legal for the user agent to <a>run animators</a> multiple times
in the same frame.

Removing an Animator {#removing-animator}
-----------------------------------------

Issue: Define when we may get rid of the animator.

Requesting Animation Frames {#requesting-animation-frames}
----------------------------------------------------------

Each <a>animator instance</a> has an associated <dfn>animation requested flag</dfn>. It must be
either <dfn>frame-requested</dfn> or <dfn>frame-current</dfn>. It is initially set to
<a>frame-current</a>. Different circumstances can cause the <a>animation requested flag</a> to be
set to <a>frame-requested</a>. These include the following:
  - Changes in the <a>current time</a> of any <a>timeline</a> in the animator's <a>animator timelines list</a>
  - Changes in the <a>current time</a> of the animator's corresponding <a>Worklet Animation</a>

[[#running-animators]] resets the <a>animation requested flag</a> on animators to
<a>frame-current</a>.


Integration With Web Animations {#integration-web-animation}
===============================


Worklet Animation {#worklet-animation-desc}
-------------------------------------------
<dfn>Worklet animation</dfn> is a kind of <a>animation</a> that allows a <a>animator instance</a> to
control the animation playback. It controls the lifetime of its corresponding <a>animator
instance</a> while giving it the playback control effectively allowing an author-defined programming
callback that runs in <a>global execution context</a> of {{animationWorklet}} to drive its output.

Being an <a>animation</a>, <a>worklet animation</a> has an <a>animation effect</a> and a
<a>timeline</a>. However unlike other animations, the <a>worklet animation</a>'s <a>current time</a>
does not directly determine its effect's <a>local time</a> (via its <a>inherited time</a>) but
instead the associated <a>animator instance</a> controls the effect's <a>local time</a> directly.
Another implication of this is that the the <a>timeline</a>'s current time does not fully determine
the animation's output.

<a>Worklet animation</a> also has an <a>animator name</a> which identifies its <a>animator
definition</a>.



Creating an Worklet Animation {#creating-worklet-animation}
-----------------------------------------------------------
<!-- Big Text: TODO -->

<pre class='idl'>

[Constructor (DOMString animatorId,
              optional (AnimationEffectReadOnly or array<AnimationEffectReadOnly>)? effects = null,
              AnimationTimeline? timeline,
              optional WorkletAnimationOptions)]
interface WorkletAnimation : Animation {
        readonly attribute DOMString animatorId;
};

</pre>

<div algorithm="create-worklet-animation">
<dfn constructor for=WorkletAnimation>WorkletAnimation(animatorId, effects, timeline)</dfn>
Creates a new {{WorkletAnimation}} object using the following procedure.

    1. Let |workletAnimation| be a new {{WorkletAnimation}} object.

    2. Run the procedure to <a>set the timeline of an animation</a> on |workletAnimation| passing
        |timeline| as the new timeline or, if a |timeline| argument is not provided,
        passing the <a>default document timeline</a> of the {{Document}} associated with the
        {{Window}} that is the <a>current global object</a>.

    3. Let |effect| be the result corresponding to the first matching condition from below.
         : If |effects| is a {{AnimationEffectReadOnly}} object,
         :: Let effect be |effects|.
         : If |effects| is an  <a>list</a> of {{AnimationEffectReadOnly}}</a>,
         :: Let |effect| be a new {{WorkletGroupEffect}} with its children set to |effects|.
         : Otherwise (effect is undefined),
         :: Let |effect| be a undefined

    4. Run the procedure to <a>set the target effect of an animation</a> on |workletAnimation|
         passing |effect| as the new effect.

    5. Run the procedure to <a>set the animator id of a worklet animation</a> on |workletAnimation|
</div>


TODO:
  - define what happens when timeline or effect is modified document scope

Issue(62): describe how constructor handles single or sequence of effects.

Worklet Animation timing model {#timing-model}
------------------------------------
<!-- Big Text: TODO -->

The section describes how <a>worklet animation</a> timing model differs from other <a>animations</a>.

In addition to existing conditions on when the <a>animation</a> is considered <a>ready</a>, a
 <a>Worklet animation</a> readiness also depends on the following condition to be true:

   - the user agent has completed any setup required to create the <a>worklet animation</a>'s
      corresponding <a>animator instance</a>.


As mentioned earlier, the <a>worklet animation</a>'s <a>current time</a> does not directly determine
its effect's <a>local time</a> (via its <a>inherited time</a>) but instead the associated
<a>animator instance</a> controls the effect's <a>local time</a> directly. The effect's local time
is set is {{animationWorklet}}'s <a>global execution context</a> which can be a parallel scope. This
means that the


Here are a few implications of the above semantics:

 - Seeking current time of a <a>Worklet Animation</a> does not necessarily change its output. So
   setting the animation <a>start time</a> or <a>current time</a> is not going to necessarily change
   it but can change the animation <a>play state</a>.
 - Similarly invoking {{Animation/finish()}} or updating <a>animation</a>'s <a>playback rate</a> will
    only change the animation <a>play state</a>.
 - Querying the animation effect's local time using {{AnimationEffectReadOnly/getComputedTiming()}}
   returns the last known value set in the {{animationWorklet}} global scope and synced back to the
   main thread. In cases where the <a>animator instance</a> is running is a parallel execution
   context this value may be stale.


Issue(63): Come with appropriate mechanism's for <a>animator instance</a> to get notified when its
   animation currentTime is changing e.g., via reverse(), finish() or playbackRate change. So that
   it can react appropriately.



Timeline Attachment {#timeline-attachment}
-------------------
<!-- Big Text: TODO -->

TODO:

Issue(61): Define semantics of attachment and detachment.



WorkletGroupEffect {#worklet-group-effect}
------------------
<!-- Big Text: TODO -->

A <a>worklet animation</a>'s effect can additionally be of {{WorkletGroupEffect}} type. Using this
group effect allows the corresponding <a>animator instance</a> to directly control its children
<a>local time</a>s.

<pre class='idl'>

interface WorkletGroupEffectReadOnly :  GroupEffectReadOnly {};

interface WorkletGroupEffect :  WorkletGroupEffectReadOnly {};
WorkletGroupEffect implements AnimationEffectMutable;
WorkletGroupEffect implements GroupEffectMutable;

[Exposed=Worklet]
partial interface AnimationEffectReadOnly {
    // Intended for use inside Animation Worklet scope to drive the effect.
    attribute double localTime;
};
</pre>


TODO:
  - define the children start time schedule for the group effect. [Issue](https://github.com/w3c/web-animations/issues/191)


Effect Stack {#effect-stack}
----------------------------

Issue: Worklet animations will have a special animation class that  ranks them with the highest
order in animation stack effect. also their composite operation is "replace" which is going to
allow them to run in parallel to other web animations in the system. Supporting other
composite operation is not in scope at this point.


Security Considerations {#security-considerations}
==================================================

Issue: Need to decide what security considerations there are for this spec.

Privacy Considerations {#privacy-considerations}
================================================

Issue: Need to decide what privacy considerations there are for this spec.

Examples {#examples}
====================

Example 1: Hidey Bar. {#example-1}
-----------------------------------------
An example of header effect where a header is moved with scroll and as soon as finger is lifted it
animates fully to close or open position depending on its current position.

<pre class='lang-markup'>
&lt;div id='scrollingContainer'&gt;
  &lt;div id='header'&gt;Some header&lt;/div&gt;
  &lt;div&gt;content&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
animationWorklet.addModule('hidey-bar-animator.js').then( _ =&gt; {
  const scrollTimeline = new ScrollTimeline($scrollingContainer, {timeRange: 100});
  const documentTimeline = document.timeline;

  // Note we pass in two timelines in the options bag which allows the animation to read their
  // currenTime values directly.
  const workletAnim = new WorkletAnimation('hidey-bar',
        new KeyFrameEffect($header,
                          [{transform: 'translateX(100px)'}, {transform: 'translateX(0px)'}],
                          {duration: 100, iterations: 1, fill: 'both' }]),
        scrollTimeline,
        {scrollTimeline, documentTimeline});
});


workletAnim.timeline == scrollTimeline; // true, timeline returns the primary timeline

&lt;/script&gt;
</pre>

<pre class='lang-javascript'>
// Inside AnimationWorkletGlobalScope

registerAnimator('hidey-bar', class {
  constructor(options) {
     this.scrollTimeline_ = options.scrollTimeline;
     this.documentTimeline_ = options.documentTimeline;
  }

  animate(currentTime, effects) {
    const scroll = this.scrollTimeline_.currentTime;  // [0, 100]
    const time = this.documentTimeline_.currentTime;

    const activelyScrolling = this.scrollTimeline_.phase == 'active';

    let localTime;
    if (activelyScrolling) {
      this.startTime_ = undefined;
      localTime = scroll;
    } else {
      this.startTime_ = this.startTime_ || time;
      // Decide on close/open direction depending on how far we have scrolled the header
      // This can even do more sophisticated animation curve by computing the scroll velocity and
      // using it.
      this.direction_ = scroll >= 50 ? +1 : -1;
      localTime = this.direction_ * (time - this.startTime_);
    }

    // Drive the output effects by setting its local time.
    effect.localTime = localTime;
  }
});

</pre>

Issue: This example uses a hypothetical "phase" property on timeline as a way to detect when user
is no longer actively scrolling. This is a reasonable thing to have on scroll timeline. A simple
fallback can emulate this by detecting when timeline time (i.e. scroll offset) has not changed in
the last few frames.


Example 2: Twitter header. {#example-2}
--------------------------
An example of twitter profile header effect where two elements (avatar, and header) are updated in
sync with scroll offset.


<pre class='lang-markup'>
// In document scope
&lt;div id='scrollingContainer'&gt;
  &lt;div id='header' style='height: 150px'&gt;&lt;/div&gt;
  &lt;div id='avatar'&gt;&lt;img&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
animationWorklet.addModule('twitter-header-animator.js').then( _ =&gt; {
  const workletAnim = new WorkletAnimation('twitter-header',
    [new KeyFrameEffect($avatar,  /* scales down as we scroll up */
                        [{transform: 'scale(1)'}, {transform: 'scale(0.5)'}],
                        {duration: 1, iterations: 1}),
     new KeyFrameEffect($header, /* loses transparency as we scroll up */
                        {opacity: 0, opacity: 0.8},
                        {duration: 1, iterations: 1})],
     new ScrollTimeline($scrollingContainer, {timeRange: 1, startScrollOffset: 0, endScrollOffset: $header.clientHeight}),
  );

  // Same animation instance is accessible via different animation targets
  workletAnim == $avatarEl.getAnimations()[0] == $headerEl.getAnimations()[0];

});
&lt;/script&gt;

</pre>

<pre class='lang-javascript'>
// Ins AnimationWorkletGlobalScope.
registerAnimator('twitter-header', class {
  constructor(options) {
    this.timing_ = new CubicBezier('ease-out');
  }

  clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  animate(currentTime, effect) {
    const scroll = currentTime;  // scroll is in [0, 1] range

    // Drive the output group effect by setting its children local times individually.
    effects.children[0].localTime = scroll;
    effects.children[1].localTime = this.timing_(clamp(scroll, 0, 0.5));
  }
});

</pre>

Example 3: Parallax backgrounds. {#example-3}
-----------------------------------------
<!-- Big Text: TODO -->

TODO
